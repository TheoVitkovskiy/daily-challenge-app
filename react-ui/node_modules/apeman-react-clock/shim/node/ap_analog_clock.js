/**
 * Analog clock.
 * @class ApAnalogClock
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _ap_clock = require('./ap_clock');

var _ap_clock2 = _interopRequireDefault(_ap_clock);

var _apemanReactMixinPure = require('apeman-react-mixin-pure');

var _chopcal = require('chopcal');

var _chopcal2 = _interopRequireDefault(_chopcal);

var _numcal = require('numcal');

var _numcal2 = _interopRequireDefault(_numcal);

var _ap_analog_clock_hand = require('./ap_analog_clock_hand');

var _ap_analog_clock_hand2 = _interopRequireDefault(_ap_analog_clock_hand);

var _ap_analog_clock_letter = require('./ap_analog_clock_letter');

var _ap_analog_clock_letter2 = _interopRequireDefault(_ap_analog_clock_letter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApAnalogClock */
var ApAnalogClock = _react2.default.createClass({
  displayName: 'ApAnalogClock',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    boardLetters: _react.PropTypes.array
  },

  mixins: [_apemanReactMixinPure.ApPureMixin],

  statics: {
    _angleForValue: function _angleForValue(value, max) {
      var rate = value % max / max;
      return _chopcal2.default.round(rate * 360, 0.1);
    },
    hourHandAngle: function hourHandAngle(date) {
      var hours = date.getHours();
      return ApAnalogClock._angleForValue(hours, 12);
    },
    minuteHandAngle: function minuteHandAngle(date) {
      var minutes = date.getMinutes();
      return ApAnalogClock._angleForValue(minutes, 60);
    },
    secondHandAngle: function secondHandAngle(date) {
      var seconds = date.getSeconds();
      return ApAnalogClock._angleForValue(seconds, 60);
    },
    letterAngle: function letterAngle(i, count) {
      return ApAnalogClock._angleForValue(i, count);
    }
  },

  getInitialState: function getInitialState() {
    return {
      hour: 0,
      minute: 0,
      second: 0,
      size: 256
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      boardLetters: '12,1,2,3,4,5,6,7,8,9,10,11'.split(',')
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;


    var letters = props.boardLetters.map(function (letter, i, letters) {
      var angle = ApAnalogClock.letterAngle(i, letters.length);
      return _react2.default.createElement(_ap_analog_clock_letter2.default, { key: 'ap-analog-letter-' + i,
        letter: letter,
        angle: angle });
    });

    var size = state.size;

    var boardStyle = {
      width: size,
      height: size
    };

    var screwSize = 9;

    return _react2.default.createElement(
      _ap_clock2.default,
      { className: (0, _classnames2.default)("ap-analog-clock", props.className) },
      _react2.default.createElement(
        'div',
        { className: 'ap-analog-clock-board', style: boardStyle },
        _react2.default.createElement(
          'div',
          { className: 'ap-analog-clock-board-inner' },
          _react2.default.createElement(_ap_analog_clock_hand2.default, { className: 'ap-analog-clock-hand-hour', width: 4, heightRate: 0.8,
            angle: state.hour }),
          _react2.default.createElement(_ap_analog_clock_hand2.default, { className: 'ap-analog-clock-hand-minute', width: 4, heightRate: 0.95,
            angle: state.minute }),
          _react2.default.createElement(_ap_analog_clock_hand2.default, { className: 'ap-analog-clock-hand-second', width: 2, heightRate: 1,
            angle: state.second })
        ),
        _react2.default.createElement(
          'div',
          null,
          letters
        ),
        _react2.default.createElement(
          'div',
          { className: 'ap-analog-clock-screw-container' },
          _react2.default.createElement('div', { className: 'ap-analog-clock-screw',
            style: { width: screwSize, height: screwSize, bottom: -screwSize / 2 },
            ref: 'screw' })
        )
      )
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  componentWillMount: function componentWillMount() {
    var s = this;
    s._looping = true;
  },
  componentDidMount: function componentDidMount() {
    var s = this;
    var props = s.props;


    function _loop() {
      if (!s._looping) {
        return;
      }
      var now = new Date();
      s.setState({
        hour: ApAnalogClock.hourHandAngle(now),
        minute: ApAnalogClock.minuteHandAngle(now),
        second: ApAnalogClock.secondHandAngle(now)
      });
      window.requestAnimationFrame(_loop);
    }

    window.addEventListener('resize', s.resizeClock);
    _loop();
    s.resizeClock();
  },
  componentWillUnmount: function componentWillUnmount() {
    var s = this;
    window.removeEventListener('resize', s.resizeClock);
    s._looping = false;
  },


  // ------------------
  // Helper
  // ------------------

  resizeClock: function resizeClock() {
    var s = this;
    var elm = _reactDom2.default.findDOMNode(s);
    var size = _numcal2.default.min(elm.offsetWidth, elm.offsetHeight);
    s.setState({
      size: size
    });
  }
  // ------------------
  // Private
  // ------------------

});

exports.default = ApAnalogClock;
//# sourceMappingURL=data:application/json;base64,bnVsbA==