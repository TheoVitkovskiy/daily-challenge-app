/**
 * Digital clock
 * @class ApDigitalLock
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _ap_clock = require('./ap_clock');

var _ap_clock2 = _interopRequireDefault(_ap_clock);

var _ap_digital_clock_main_display = require('./ap_digital_clock_main_display');

var _ap_digital_clock_main_display2 = _interopRequireDefault(_ap_digital_clock_main_display);

var _ap_digital_clock_sub_display = require('./ap_digital_clock_sub_display');

var _ap_digital_clock_sub_display2 = _interopRequireDefault(_ap_digital_clock_sub_display);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _apemanReactMixinPure = require('apeman-react-mixin-pure');

var _numcal = require('numcal');

var _numcal2 = _interopRequireDefault(_numcal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApDigitalLock */
var ApDigitalLock = _react2.default.createClass({
  displayName: 'ApDigitalLock',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    showSeconds: _react.PropTypes.bool
  },

  mixins: [_apemanReactMixinPure.ApPureMixin],

  statics: {
    padZero: function padZero(value, len) {
      var result = String(value);
      while (result.length < len) {
        result = '0' + result;
      }
      return result;
    }
  },

  getInitialState: function getInitialState() {
    return {
      hours: '00',
      minutes: '00',
      seconds: '00',
      size: 256,
      labelWidth: 256
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      showSeconds: true
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;


    var size = state.size;

    var mainFontSize = parseInt(size * 0.2);
    var subFontSize = mainFontSize / 4;

    var boardStyle = {
      width: size + 'px',
      height: size + 'px'
    };

    return _react2.default.createElement(
      _ap_clock2.default,
      { className: (0, _classnames2.default)('ap-digital-clock', props.className) },
      _react2.default.createElement(
        'div',
        { className: 'ap-digital-clock-board', style: boardStyle },
        _react2.default.createElement(
          'div',
          { className: 'ap-digital-clock-dummy-text',
            style: { lineHeight: size + 'px' }
          },
          'Â '
        ),
        _react2.default.createElement(
          'div',
          { className: 'ap-digital-clock-board-inner' },
          _react2.default.createElement(_ap_digital_clock_main_display2.default, { hours: state.hours,
            minutes: state.minutes,
            seconds: state.seconds,
            fontSize: mainFontSize,
            onSizeChange: s.onMainDisplaySizeChange
          }),
          _react2.default.createElement(_ap_digital_clock_sub_display2.default, { day: state.day,
            width: state.labelWidth,
            fontSize: subFontSize
          })
        )
      )
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  componentWillMount: function componentWillMount() {
    var s = this;
    s._looping = true;
  },
  componentDidMount: function componentDidMount() {
    var s = this;
    var props = s.props;


    var padZero = ApDigitalLock.padZero;

    function _loop() {
      if (!s._looping) {
        return;
      }
      var now = new Date();

      s.setState({
        hours: padZero(now.getHours(), 2),
        minutes: padZero(now.getMinutes(), 2),
        seconds: padZero(now.getSeconds(), 2),
        day: (0, _moment2.default)(now).format('LL')
      });
      window.requestAnimationFrame(_loop);
    }

    window.addEventListener('resize', s.resizeClock);
    _loop();
    s.resizeClock();
  },
  componentWillUnmount: function componentWillUnmount() {
    var s = this;
    window.removeEventListener('resize', s.resizeClock);
    s._looping = false;
  },


  // ------------------
  // Helper
  // ------------------

  resizeClock: function resizeClock() {
    var s = this;
    var elm = _reactDom2.default.findDOMNode(s);
    var size = _numcal2.default.min(elm.offsetWidth, elm.offsetHeight);
    s.setState({
      size: size
    });
  },
  onMainDisplaySizeChange: function onMainDisplaySizeChange(sizes) {
    var s = this;
    s.setState({
      labelWidth: sizes.innerWidth
    });
  }
});

exports.default = ApDigitalLock;
//# sourceMappingURL=data:application/json;base64,bnVsbA==